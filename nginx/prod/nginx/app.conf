proxy_cache_path /tmp/cacheapi levels=1:2 keys_zone=microcacheapi:100m max_size=1g inactive=1d use_temp_path=off;


server {

    listen 80 default_server;
    return 301 https://$host$request_uri;

}


server {
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;
    server_name api.${DOMAIN};

    if ($host != api.${DOMAIN}) {
        return 404;
    }

    # SSL
    ssl_certificate /etc/letsencrypt/live/api.${DOMAIN}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.${DOMAIN}/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    client_max_body_size 20M;

    # . files
    location ~ /\.(?!well-known) {
        deny all;
    }

    location / {
        try_files $uri @proxy_api;
    }

    location @proxy_api {
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Url-Scheme $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_redirect off;
        proxy_pass http://backend:8000;

        # Rate Limiting
        limit_req zone=reqlimit burst=20 nodelay; # Max burst of request
        limit_req_status 460; # Status to send
        
        # Connections Limiting
        limit_conn connlimit 20; # Number of downloads per IP       
        
        # Bandwidth Limiting
        limit_rate 4096k; # Speed limit (here is on kb/s)

        # Forbid all request types except GET and HEAD
        limit_except GET HEAD OPTIONS { 
            deny all; 
        }
    }

    location /mineral/ {

        # Micro caching
        proxy_cache microcacheapi;
        proxy_cache_valid 200 1s;
        proxy_cache_use_stale updating;
        proxy_cache_background_update on;
        proxy_cache_lock on;

    }

    location ~* \.(jpg|jpeg|png|gif|ico)$ {
        expires 30d;
    }

    location ~* \.(css|js)$ {
        expires 7d;
    }

    # favicon.ico
    location = /favicon.ico {
        log_not_found off;
        access_log    off;
    }

    # robots.txt
    location = /robots.txt {
        log_not_found off;
        access_log    off;
    }

}

# Redirect from www.api{DOMAIN} to api.{DOMAIN}
# server {
#     listen 80;
#     listen [::]:80;

#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;

#     server_name www.api.{DOMAIN};
#     return 301 https://$host$request_uri;

#     # SSL
#     ssl_certificate /etc/letsencrypt/live/api.${DOMAIN}/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/api.${DOMAIN}/privkey.pem;
# }