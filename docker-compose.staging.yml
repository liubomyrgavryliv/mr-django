version: '3.7'

services:
  app:
    container_name: app
    build:
      context: .
      dockerfile: Dockerfile.prod
    image: 569121191347.dkr.ecr.eu-central-1.amazonaws.com/gpminerals:app
    command: gunicorn gpminerals.wsgi:application --bind 0.0.0.0:8000
    expose:
      - 8000
    env_file:
      - .env.dev
  frontend:
    container_name: frontend
    build:
      context: ./frontend
    image: 569121191347.dkr.ecr.eu-central-1.amazonaws.com/gpminerals:frontend
    volumes:
      - "./frontend:/app/"
      - "/app/node_modules"
    ports:
      - "3001:3000"
    depends_on:
      - app
  nginx-proxy:
    container_name: nginx-proxy
    build: nginx
    image: 569121191347.dkr.ecr.eu-central-1.amazonaws.com/gpminerals:nginx-pro>
    restart: always
    ports:
      - 443:443
      - 80:80
    volumes:
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
      - /var/run/docker.sock:/tmp/docker.sock:ro
    depends_on:
      - app
  nginx-proxy-letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    env_file:
      - .env.staging.proxy-companion
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
    depends_on:
      - nginx-proxy
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    environment:
      - discovery.type=single-node
      - "http.cors.allow-origin=http://0.0.0.0:8000"
      - "http.cors.enabled=true"
      - "http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Con>
      - "http.cors.allow-credentials=true"
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
  redis:
      restart: always
      image: redis:latest
      ports:
        - "6379:6379"
      volumes:
        - redisdata:/data
      depends_on:
        - app
volumes:
  certs:
  html:
  vhost:
  esdata:
  redisdata:
