version: "3.8"
services:
    database: # Local dev database
        container_name: database
        image: postgres:latest
        restart: unless-stopped
        ports:
            - "5432:5432"
        volumes:
            - database-data:/var/lib/postgresql/data/
            - ./db/sh/:/docker-entrypoint-initdb.d/
            - ./db/backup:/backup
        env_file:
            - ./.dev.env
    backend: # The back-end of the mr project
        container_name: backend
        build:
            context: .
            dockerfile: Dockerfile
        command: sh -c "python3 manage.py runserver 0.0.0.0:8000"
        restart: unless-stopped
        volumes:
            - .:/usr/src/backend/
        env_file:
            - ./.dev.env
        ports:
            - "8000:8000"
    elasticsearch: # A search engine service
        container_name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
        environment:
            - discovery.type=single-node
            - http.cors.allow-origin="*"
            - "http.cors.enabled=true"
            - "http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization"
            - "http.cors.allow-credentials=true"
        ports:
            - "9200:9200"
        volumes:
            - esdata:/usr/share/elasticsearch/data
    redis: # A database for caching the requests
        container_name: redis
        restart: unless-stopped
        image: redis:latest
        ports:
            - "6379:6379"
        volumes:
            - redisdata:/data
    nginx: # A web server
        container_name: nginx
        restart: unless-stopped
        build:
            context: ./nginx
            dockerfile: Dockerfile
        ports:
            - "80:80"
        depends_on:
            - backend
        volumes:
            - ./nginx/dev:/etc/nginx/conf.d
volumes:
    redisdata:
    esdata:
    database-data:
